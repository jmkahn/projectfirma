@*-----------------------------------------------------------------------
<copyright file="ProjectBasics.cshtml" company="Tahoe Regional Planning Agency and Sitka Technology Group">
Copyright (c) Tahoe Regional Planning Agency and Sitka Technology Group. All rights reserved.
<author>Sitka Technology Group</author>
</copyright>

<license>
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

Source code is available upon request via <support@sitkatech.com>.
</license>
-----------------------------------------------------------------------*@
@using LtInfo.Common
@using LtInfo.Common.Views
@using ProjectFirma.Web.Common
@using ProjectFirma.Web.Models
@using ProjectFirmaModels.Models
@using ProjectFirma.Web.Views.Shared.ProjectControls
@inherits ProjectBasics

<style>
    .basicsLayout .row {
        margin-left: 0;
        margin-right: 0;
    }

    .basicsLayout .row div {
        padding-left: 0;
        padding-right: 5px;
    }

    .basicsLayout hr {
        margin-top: 5px;
        margin-bottom: 5px;
    }
</style>

<script src="@Url.Content("~/Content/bootstrap-tags/bootstrap-tags.min.js")" type="text/javascript"></script>

<div class="basicsLayout">

    <div class="row">
        <div class="col-xs-12">
            <label>@FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabel() Category</label>
        </div>
    </div>

    @{ ProjectTaxonomy.RenderPartialView(Html, ViewDataTyped.ProjectTaxonomyViewData); }
    
    @if (ViewDataTyped.TenantAttribute.EnableSecondaryProjectTaxonomyLeaf && ViewDataTyped.TaxonomyGrouping.Any())
    {
        <hr />

        foreach (var trunkGrouping in ViewDataTyped.TaxonomyGrouping)
        {
            <div class="row taxonomyRow">
                <div class="col-sm-5 taxonomyBasicsPanelLabel">
                    <label>
                        @Html.LabelWithSugarFor(FieldDefinitionEnum.TaxonomyTrunk.ToType(), LabelWithSugarForExtensions.DisplayStyle.HelpIconOnly)
                        Secondary @FieldDefinitionEnum.TaxonomyTrunk.ToType().GetFieldDefinitionLabelPluralized()
                    </label>
                </div>
                <div class="col-sm-7">
                    <span class="taxonomyLink">@(trunkGrouping.Key.GetDisplayNameAsUrl())</span>
                </div>
            </div>
            foreach (var branch in trunkGrouping.Key.TaxonomyBranches.Where(x => ViewDataTyped.Project.SecondaryProjectTaxonomyLeafs.Select(y => y.TaxonomyLeaf.TaxonomyBranchID).Contains(x.TaxonomyBranchID)))
            {
                <div class="row taxonomyRow">
                    <div class="col-sm-5 col-sm-offset-1 taxonomyBasicsPanelLabel">
                        <label>
                            @Html.LabelWithSugarFor(FieldDefinitionEnum.TaxonomyBranch.ToType(), LabelWithSugarForExtensions.DisplayStyle.HelpIconOnly)
                            Secondary @FieldDefinitionEnum.TaxonomyBranch.ToType().GetFieldDefinitionLabelPluralized()
                        </label>
                    </div>
                    <div class="col-sm-6">
                        <span class="taxonomyLink">@(branch.GetDisplayNameAsUrl())</span>
                    </div>
                </div>
                foreach (var leaf in branch.TaxonomyLeafs.Where(x => ViewDataTyped.Project.SecondaryProjectTaxonomyLeafs.Select(y => y.TaxonomyLeafID).Contains(x.TaxonomyLeafID)))
                {
                    <div class="row taxonomyRow">
                        <div class="col-sm-5 col-sm-offset-2 taxonomyBasicsPanelLabel">
                            <label>
                                @Html.LabelWithSugarFor(FieldDefinitionEnum.TaxonomyLeaf.ToType(), LabelWithSugarForExtensions.DisplayStyle.HelpIconOnly)
                                Secondary @FieldDefinitionEnum.TaxonomyLeaf.ToType().GetFieldDefinitionLabelPluralized()
                            </label>
                        </div>
                        <div class="col-sm-5">
                            <span class="taxonomyLink">@(leaf.GetDisplayNameAsUrl())</span>
                        </div>
                    </div>
                }
            }
        }
    }

    <hr />
    <div class="row">
        <div class="col-xs-5">
            @Html.LabelWithSugarFor(FieldDefinitionEnum.ProjectStage.ToType())
        </div>
        <div class="col-xs-7">
            @ViewDataTyped.Project.ProjectStage.ProjectStageDisplayName
        </div>
    </div>
    <div class="row">
        <div class="col-xs-12">
            @Html.LabelWithSugarFor(FieldDefinitionEnum.ProjectDescription.ToType())
        </div>
        <div class="col-xs-12" style="padding-left: 20px">
            @Html.Raw(ViewDataTyped.Project.ProjectDescription.HtmlEncodeWithBreaks())
        </div>
    </div>

    <hr />

    @if (ViewDataTyped.Project.FundingTypeID == (int)FundingTypeEnum.Capital)
    {
        <div class="row">
            <div class="col-xs-6">@Html.LabelWithSugarFor(FieldDefinitionEnum.EstimatedTotalCost.ToType())</div>
            <div class="col-xs-6">
                @ViewDataTyped.Project.EstimatedTotalCost.ToStringCurrency()
            </div>
        </div>
        <div class="row">
            <div class="col-xs-6">
                @Html.LabelWithSugarFor(FieldDefinitionEnum.SecuredFunding.ToType())
            </div>
            <div class="col-xs-6">
                @ViewDataTyped.Project.GetSecuredFunding().ToStringCurrency()
            </div>
            <div class="row">
            </div>
            <div class="col-xs-6">
                @Html.LabelWithSugarFor(FieldDefinitionEnum.UnfundedNeed.ToType())
            </div>
            <div class="col-xs-6">
                @ViewDataTyped.Project.UnfundedNeed().ToStringCurrency()
            </div>
        </div>
    }
    else if (ViewDataTyped.Project.FundingTypeID == (int)FundingTypeEnum.OperationsAndMaintenance)
    {
        <div class="row">
            <div class="col-xs-6">
                @Html.LabelWithSugarFor(FieldDefinitionEnum.EstimatedAnnualOperatingCost.ToType())
            </div>
            <div class="col-xs-6">
                @ViewDataTyped.Project.EstimatedAnnualOperatingCost.ToStringCurrency()
            </div>
        </div>
        <div class="row">
            <div class="col-xs-6">
                @Html.LabelWithSugarFor(FieldDefinitionEnum.CalculatedTotalRemainingOperatingCost.ToType())
            </div>
            @if (ViewDataTyped.Project.CanCalculateTotalRemainingOperatingCostInYearOfExpenditure())
            {
                <div class="col-xs-6">
                    <span>@ViewDataTyped.ProjectBasicsCalculatedCosts.TotalOperatingCostInYearOfExpenditure.ToStringCurrency()</span>
                    @if (ViewDataTyped.UserHasProjectBudgetManagePermissions)
                    {
                        <span>(For years @ViewDataTyped.ProjectBasicsCalculatedCosts.StartYearForTotalOperatingCostCalculation-@ViewDataTyped.Project.CompletionYear using <a href="@ViewDataTyped.ProjectBasicsCalculatedCosts.EditInflationUrl">@ViewDataTyped.ProjectBasicsCalculatedCosts.InflationRate.ToStringPercent() annual inflation</a>)</span>
                    }
                    else
                    {
                        <span>(For years @ViewDataTyped.ProjectBasicsCalculatedCosts.StartYearForTotalOperatingCostCalculation-@ViewDataTyped.Project.CompletionYear using @ViewDataTyped.ProjectBasicsCalculatedCosts.InflationRate.ToStringPercent() annual inflation)</span>
                    }
                </div>
            }
        </div>
    }
    <div class="row">
        <div class="col-xs-6">
            @Html.LabelWithSugarFor(FieldDefinitionEnum.FundingType.ToType())
        </div>
        <div class="col-xs-6">
            @ViewDataTyped.Project.FundingType.GetFundingTypeDisplayName()
        </div>
    </div>

    <hr />

    <div class="row">
        <div class="col-xs-6">
            @Html.LabelWithSugarFor(FieldDefinitionEnum.PlanningDesignStartYear.ToType())
        </div>
        <div class="col-xs-6">
            @ProjectModelExtensions.GetPlanningDesignStartYear(ViewDataTyped.Project)
        </div>
    </div>
    <div class="row">
        <div class="col-xs-6">
            @Html.LabelWithSugarFor(FieldDefinitionEnum.ImplementationStartYear.ToType())
        </div>
        <div class="col-xs-6">
            @ProjectModelExtensions.GetImplementationStartYear(ViewDataTyped.Project)
        </div>
    </div>
    <div class="row">
        <div class="col-xs-6">
            @Html.LabelWithSugarFor(FieldDefinitionEnum.CompletionYear.ToType())
        </div>
        <div class="col-xs-6">
            @ProjectModelExtensions.GetCompletionYear(ViewDataTyped.Project)
        </div>
    </div>
</div>

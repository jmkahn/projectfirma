@*-----------------------------------------------------------------------
    <copyright file="ExpendituresByCostType.cshtml" company="Tahoe Regional Planning Agency and Sitka Technology Group">
    Copyright (c) Tahoe Regional Planning Agency and Sitka Technology Group. All rights reserved.
    <author>Sitka Technology Group</author>
    </copyright>

    <license>
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

    Source code is available upon request via <support@sitkatech.com>.
    </license>
    -----------------------------------------------------------------------*@
@using ProjectFirma.Web.Common
@using ProjectFirmaModels.Models
@using ProjectFirma.Web.Views.ProjectUpdate
@using LtInfo.Common
@using LtInfo.Common.ModalDialog
@using Newtonsoft.Json.Linq
@using ProjectFirma.Web.Models
@using ProjectFirma.Web.Views.Shared.ExpenditureAndBudgetControls
@inherits ExpendituresByCostType

@section JavascriptAndStylesContent
{
    @if (ViewDataTyped.IsEditable && ViewDataTyped.AreProjectBasicsValid)
    {
        <script src="@Url.Content("~/Views/ProjectUpdate/ExpendituresByCostTypeController.js")" type="text/javascript"></script>
        <script type="text/javascript">
            // <![CDATA[
            angular.module("ProjectFirmaApp").factory("angularModelAndViewData", function()
            {
                return {
                    AngularModel: @Html.Raw(JObject.FromObject(Model)),
                    AngularViewData: @Html.Raw(JObject.FromObject(ViewDataTyped.ViewDataForAngular))
                };
            });
            // ]]>
        </script>
    }
}

<h1>By Cost Type</h1>

To enter your @FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabel()'s annual expenditures, add the appropriate @FieldDefinitionEnum.FundingSource.ToType().GetFieldDefinitionLabelPluralized() and then enter the amount contributed by each for the duration defined by your @FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabel()'s Planning / Design Start and @FieldDefinitionEnum.CompletionYear.ToType().GetFieldDefinitionLabel()
(or, if @FieldDefinitionEnum.CompletionYear.ToType().GetFieldDefinitionLabel() isn't set, through the current year). If your @FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabel() had no expenditures for a given year, enter zero "0" for that year for at least one of its @(FieldDefinitionEnum.FundingSource.ToType().GetFieldDefinitionLabelPluralized()).
<hr />
<div style="margin: 10px 0">
    <p>
        Other financial information for this @FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabel() that might be helpful:
    </p>

    @if (ViewDataTyped.Project.FundingTypeID == FundingType.BudgetVariesByYear.FundingTypeID)
    {
        <div style="width: 300px">@FieldDefinitionEnum.EstimatedTotalCost.ToType().GetFieldDefinitionLabel(): <span style="float: right; font-weight: bold">@ViewDataTyped.ProjectUpdateBatch.ProjectUpdate.GetEstimatedTotalCost().ToStringCurrency()</span></div>
        <div style="width: 300px">@FieldDefinitionEnum.SecuredFunding.ToType().GetFieldDefinitionLabel(): <span style="float: right; font-weight: bold">@ViewDataTyped.ProjectUpdateBatch.ProjectUpdate.GetSecuredFunding().ToStringCurrency()</span></div>
        <div style="width: 300px">@FieldDefinitionEnum.NoFundingSourceIdentified.ToType().GetFieldDefinitionLabel(): <span style="float: right; font-weight: bold">@ViewDataTyped.ProjectUpdateBatch.ProjectUpdate.NoFundingSourceIdentifiedYet.ToStringCurrency()</span></div>
    }
    else if (ViewDataTyped.Project.FundingTypeID == FundingType.BudgetSameEachYear.FundingTypeID)
    {
        <table>
            <tr>
                <td style="width: 200px">
                    @FieldDefinitionEnum.EstimatedAnnualOperatingCost.ToType().GetFieldDefinitionLabel():
                </td>
                <td>
                    <span style="font-weight: bold">@ViewDataTyped.ProjectUpdateBatch.ProjectUpdate.GetEstimatedTotalCost().ToStringCurrency()</span>
                </td>
            </tr>
            <tr>
                <td>
                    Estimated Total Operating Cost:
                </td>
                @if (ViewDataTyped.ProjectUpdateBatch.ProjectUpdate.CanCalculateTotalRemainingOperatingCostInYearOfExpenditure())
                {
                    <td>
                        <span style="font-weight: bold">@ViewDataTyped.TotalOperatingCostInYearOfExpenditure.ToStringCurrency()</span> (For years @ViewDataTyped.StartYearForTotalOperatingCostCalculation-@ViewDataTyped.ProjectUpdateBatch.ProjectUpdate.CompletionYear)
                    </td>
                }
            </tr>
        </table>
    }
</div>

@if (!ViewDataTyped.IsEditable)
{
    ProjectExpendituresDetail.RenderPartialView(Html, ViewDataTyped.ProjectExpendituresDetailViewData);
}
else if (!ViewDataTyped.AreProjectBasicsValid)
{
    <div class="alert alert-danger">
        @FirmaValidationMessages.UpdateSectionIsDependentUponBasicsSection
    </div>
}
else
{
    using (Html.BeginForm())
    {
    <div ng-app="ProjectFirmaApp" id="EditFundingSourceExpendituresApp" ng-controller="ExpendituresByCostTypeController" style="overflow-x: auto">
        <hr />
        <div style="margin-top: 5px">
            <a style="font-weight: bold; cursor: pointer" ng-click="AngularViewData.ShowNoExpendituresExplanation = !AngularViewData.ShowNoExpendituresExplanation">
                <i ng-class="AngularViewData.ShowNoExpendituresExplanation ? 'glyphicon glyphicon-chevron-up' : 'glyphicon glyphicon-chevron-down'"></i>
                What if the @FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabel() has no expenditures to report?
            </a>
            <div ng-show="AngularViewData.ShowNoExpendituresExplanation">
                Select the years for which you have no expenditures to report and provide a brief explanation.
                <a style="cursor: pointer" ng-click="selectAllYears(true)">Select All</a> |
                <a style="cursor: pointer" ng-click="selectAllYears(false)">Unselect All</a>
                <div>
                    <label ng-repeat="projectExemptYearUpdate in AngularModel.ProjectExemptReportingYears | orderBy:'CalendarYear'" style="padding-right: 10px">
                        <input type="checkbox" ng-model="projectExemptYearUpdate.IsExempt" /> <span ng-bind="projectExemptYearUpdate.CalendarYearDisplay"></span>
                    </label>
                </div>
                @Html.TextAreaFor(x => x.Explanation, new Dictionary<string, object> { { "style", "width:100%" }, { "placeholder", "Explanation here" }, { "ng-model", "AngularModel.Explanation" }, { "class", "form-control" } })

            </div>
        </div>
        <hr />
        <div style="display: inline-block; margin-right: 5px; vertical-align: top">
            @FieldDefinitionEnum.FundingSource.ToType().GetFieldDefinitionLabel() to Add:
        </div>
        <br />
        @* Select Funding Source to Add *@
        <div class="form-group">
            <label class="control-label">Funding Source to Add:</label>
            <div class="input-group">
                <select ng-model="fundingSourceIDToAdd"
                        class="selectpicker"
                        data-live-search="true"
                        data-container="body"
                        title="Select a @FieldDefinitionEnum.FundingSource.ToType().GetFieldDefinitionLabel() to Add"
                        data-width="100%">
                    <option value="null" disabled selected>Select a Funding Source to Add</option>
                    <option ng-repeat="fundingSource in filteredFundingSources()"
                            value="{{fundingSource.FundingSourceID}}"
                            ng-selected="FundingSourceIDToAdd == fundingSource.FundingSourceID"
                            ng-bind="fundingSource.DisplayName"
                            data-tokens="{{fundingSource.DisplayName}}"></option>
                </select>
                <span class="input-group-btn">
                    <button class="btn btn-trpa" type="button" ng-click="addRow()">
                        <span class="glyphicon glyphicon-plus"></span> Add
                    </button>
                </span>
            </div>
            <hr />
        </div>

        <div ng-repeat="fundingSourceID in getAllUsedFundingSourceIds() | orderBy:[getFundingSourceNameById]">

            <span class="glyphicon glyphicon-trash blue" title="Remove row" alt="Remove row" ng-click="deleteFundingSourceRow(fundingSourceID)" style="cursor: pointer"></span>
            <label class="control-label"><span ng-bind="getFundingSourceNameById(fundingSourceID)"></span></label>
            <table class="table table-responsive table-condensed" style="display: block; overflow: auto;">
                <thead>
                <tr>
                    <th style="white-space: nowrap">Cost Type</th>
                    <th ng-repeat="calendarYear in getCalendarYearRange()" style="text-align: right; vertical-align: top">
                        <span class="glyphicon glyphicon-plus-sign blue" ng-click="addCalendarYear(calendarYear - 1)" ng-show="$first" title="Add Next Year '{{calendarYear + 1}}'" alt="Add Next Year '{{calendarYear + 1}}'" style="cursor: pointer"></span>
                        <span ng-bind="calendarYear"></span>
                        <span class="glyphicon glyphicon-plus-sign blue" ng-click="addCalendarYear(calendarYear + 1)" ng-show="$last" title="Add Previous Year '{{calendarYear - 1}}'" alt="Add Previous Year '{{calendarYear - 1}}'" style="cursor: pointer"></span>
                    </th>
                    <th style="text-align: right">Total</th>
                </tr>
                </thead>
                <tbody>
                @* Funding Source Totals Row *@
                <tr>
                    <td style="white-space: nowrap">
                        All
                    </td>
                    <td style="text-align: right;" ng-repeat="calendarYear in getCalendarYearRange()">
                        <span> {{getExpenditureTotalForFundingSourceAndCalendarYear(fundingSourceID, calendarYear)  | currency:"$"}}</span>
                    </td>
                    <th style="text-align: right"> {{getExpenditureTotalForFundingSource(fundingSourceID) | currency:"$"}}</th>
                </tr>
                @* Expenditure Entry Rows *@
                <tr ng-repeat="projectFundingSourceExpenditure in getProjectFundingSourceExpenditureRowsForCostType(fundingSourceID) | orderBy:[getFundingSourceName]">
                    <td ng-bind="getCostTypeName(projectFundingSourceExpenditure)"/>
                    <td style="text-align: right;" ng-repeat="calendarYearExpenditure in projectFundingSourceExpenditure.CalendarYearExpenditures | orderBy:'CalendarYear'">
                        <input type="text" ng-model="calendarYearExpenditure.MonetaryAmount" class="sitkaCurrency form-control" ng-currency/>
                    </td>
                    <th style="text-align: right"> {{getExpenditureTotalForRow(projectFundingSourceExpenditure) | currency:"$"}}</th>
                </tr>
                </tbody>
            </table>
        </div>
        @* Totals Table *@
        <div>
            <label class="control-label">Total</label>
            <table class="table table-responsive table-condensed" style="display: block; overflow: auto;">
                <tr>
                    <th colspan="1" style="white-space: nowrap"><strong></strong></th>
                    <th ng-repeat="calendarYear in getCalendarYearRange()" style="text-align: right; vertical-align: top">
                        <span class="glyphicon glyphicon-plus-sign blue" ng-click="addCalendarYear(calendarYear - 1)" ng-show="$first" title="Add Next Year '{{calendarYear + 1}}'" alt="Add Next Year '{{calendarYear + 1}}'" style="cursor: pointer"></span>
                        <span ng-bind="calendarYear"></span>
                        <span class="glyphicon glyphicon-plus-sign blue" ng-click="addCalendarYear(calendarYear + 1)" ng-show="$last" title="Add Previous Year '{{calendarYear - 1}}'" alt="Add Previous Year '{{calendarYear - 1}}'" style="cursor: pointer"></span>
                    </th>
                    <th style="text-align: right">Total</th>
                </tr>
                <tbody>
                    <tr>
                        <td colspan="1">All</td>
                        <td ng-repeat="calendarYear in getCalendarYearRange()" style="text-align: right"> {{getExpenditureTotalForCalendarYear(calendarYear) | currency:"$"}}</td>
                        <td style="text-align: right"> {{getExpenditureTotalForCalendarYear() | currency:"$"}}</td>
                    </tr>
                </tbody>
            </table>
        </div>
      
        <div ng-repeat="projectFundingSourceExpenditure in AngularModel.ProjectFundingSourceExpenditures | orderBy:[getFundingSourceName]">
            <input type="hidden" name="@Html.NameFor(x => x.ProjectFundingSourceExpenditures[0].ProjectID).ToString().Replace("0", "{{$index}}")" value="{{projectFundingSourceExpenditure.ProjectID}}" />
            <input type="hidden" name="@Html.NameFor(x => x.ProjectFundingSourceExpenditures[0].FundingSourceID).ToString().Replace("0", "{{$index}}")" value="{{projectFundingSourceExpenditure.FundingSourceID}}" />
            <input type="hidden" name="@Html.NameFor(x => x.ProjectFundingSourceExpenditures[0].CostTypeID).ToString().Replace("0", "{{$index}}")" value="{{projectFundingSourceExpenditure.CostTypeID}}" />
            <div ng-repeat="calendarYearExpenditure in projectFundingSourceExpenditure.CalendarYearExpenditures | orderBy:'CalendarYear'">
                <input type="hidden" name="@Html.NameFor(x => x.ProjectFundingSourceExpenditures[0].CalendarYearExpenditures[1].CalendarYear).ToString().Replace("0", "{{$parent.$index}}").Replace("1", "{{$index}}")" value="{{calendarYearExpenditure.CalendarYear}}" />
                <input type="hidden" name="@Html.NameFor(x => x.ProjectFundingSourceExpenditures[0].CalendarYearExpenditures[1].MonetaryAmount).ToString().Replace("0", "{{$parent.$index}}").Replace("1", "{{$index}}")" value="{{calendarYearExpenditure.MonetaryAmount}}" />
            </div>
        </div>
        <div ng-repeat="projectExemptYear in AngularModel.ProjectExemptReportingYears">
            <input type="hidden" name="@Html.NameFor(x => x.ProjectExemptReportingYears[0].CalendarYear).ToString().Replace("0", "{{$index}}")" value="{{projectExemptYear.CalendarYear}}" />
            <input type="hidden" name="@Html.NameFor(x => x.ProjectExemptReportingYears[0].CalendarYearDisplay).ToString().Replace("0", "{{$index}}")" value="{{projectExemptYear.CalendarYearDisplay}}" />
            <input type="hidden" name="@Html.NameFor(x => x.ProjectExemptReportingYears[0].ProjectID).ToString().Replace("0", "{{$index}}")" value="{{projectExemptYear.ProjectID}}" />
            <input type="hidden" name="@Html.NameFor(x => x.ProjectExemptReportingYears[0].ProjectExemptReportingYearID).ToString().Replace("0", "{{$index}}")" value="{{projectExemptYear.ProjectExemptReportingYearID}}" />
            <input type="hidden" name="@Html.NameFor(x => x.ProjectExemptReportingYears[0].IsExempt).ToString().Replace("0", "{{$index}}")" value="{{projectExemptYear.IsExempt}}" />
        </div>


        @if (ViewDataTyped.ShowApproveAndReturnButton)
        {
            <hr />
            <div class="row form-group">
                <div class="col-md-3">@Html.LabelWithSugarFor(x => x.Comments)</div>
                <div class="col-md-9">
                    @Html.TextAreaFor(x => x.Comments, new Dictionary<string, object> { { "style", "width: 100%" }, { "class", "form-control" } })
                </div>
            </div>
        }
        <hr />
        @{ SectionComments.RenderPartialView(Html, ViewDataTyped.SectionCommentsViewData); }
        <div class="row">
            <div class="col-xs-6">
                @ModalDialogFormHelper.ModalDialogFormLink("revert-button", "Revert Current Page", ViewDataTyped.RefreshUrl, "Refresh this section", 500, "Continue", "Continue", "Cancel", new List<string> { "btn btn-xs btn-firma" }, null, null, null, "Undo all changes on this page")
                @if (ViewDataTyped.ProjectUpdateStatus.IsExpendituresUpdated)
                {
                    @ModalDialogFormHelper.ModalDialogFormLink("diff-link-id", "Show Changes", ViewDataTyped.DiffUrl, string.Format("Changes to {0} Expenditures", FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabel()), 800, "hidden-save-button", string.Empty, "Close", new List<string> { "btn btn-xs btn-firma" }, null, null, null)
                }
            </div>
            <div style="text-align: right; white-space: nowrap">
                <button type="submit" class="btn btn-xs btn-firma" title="Save changes made on this page" value="false" name="@Html.NameFor(x => x.AutoAdvance)" ng-disabled="pmForm.$invalid">Save</button>
                <button type="submit" class="btn btn-xs btn-firma" title="Save changes and continue to next page" value="true" name="@Html.NameFor(x => x.AutoAdvance)" ng-disabled="pmForm.$invalid">Save &amp; Continue<span class='glyphicon glyphicon-chevron-right'></span></button>
            </div>
        </div>

    </div>
    }
}

<script type="text/javascript">
    //<![CDATA[
    jQuery(document).ready(function () { HookupCheckIfFormIsDirty(undefined, ".submitProject"); });
    // ]]>
</script>
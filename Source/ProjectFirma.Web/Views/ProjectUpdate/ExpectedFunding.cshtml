@*-----------------------------------------------------------------------
    <copyright file="ExpectedFunding.cshtml" company="Tahoe Regional Planning Agency and Sitka Technology Group">
    Copyright (c) Tahoe Regional Planning Agency and Sitka Technology Group. All rights reserved.
    <author>Sitka Technology Group</author>
    </copyright>

    <license>
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

    Source code is available upon request via <support@sitkatech.com>.
    </license>
    -----------------------------------------------------------------------*@
@using ProjectFirma.Web.Common
@using ProjectFirmaModels.Models
@using ProjectFirma.Web.Views.ProjectFunding
@using ProjectFirma.Web.Views.ProjectUpdate
@using LtInfo.Common
@using LtInfo.Common.ModalDialog
@using Newtonsoft.Json.Linq
@using ProjectFirma.Web.Models
@inherits ExpectedFunding

@section JavascriptAndStylesContent
{
    @if (ViewDataTyped.IsEditable && ViewDataTyped.AreProjectBasicsValid)
    {
        <script src="@Url.Content("~/Views/ProjectUpdate/ExpectedFundingController.js")" type="text/javascript"></script>
        <script type="text/javascript">
            // <![CDATA[
            angular.module("ProjectFirmaApp").factory("angularModelAndViewData", function()
            {
                return {
                    AngularModel: @Html.Raw(JObject.FromObject(Model)),
                    AngularViewData: @Html.Raw(JObject.FromObject(ViewDataTyped.ViewDataForAngular))
                };
            });

            // ]]>
        </script>
    }
}

@if (!ViewDataTyped.AreProjectBasicsValid)
{
    <div class="alert alert-danger">
        @FirmaValidationMessages.UpdateSectionIsDependentUponBasicsSection
    </div>
}



    <p>
        Enter the expected funding for your @(FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabel()). You may enter multiple @(FieldDefinitionEnum.FundingSource.ToType().GetFieldDefinitionLabelPluralized()).
        For each @(FieldDefinitionEnum.FundingSource.ToType().GetFieldDefinitionLabel()), provide the amount of funding that has been secured, and the amount that is targeted but not yet secured. If the amount of @FieldDefinitionEnum.SecuredFunding.ToType().GetFieldDefinitionLabel() or @FieldDefinitionEnum.TargetedFunding.ToType().GetFieldDefinitionLabel() is unknown, you can leave the amounts blank.
    </p>

<hr />

@if (!ViewDataTyped.IsEditable)
{
    ProjectFundingDetail.RenderPartialView(Html, ViewDataTyped.ProjectFundingDetailViewData);
}
else if (ViewDataTyped.AreProjectBasicsValid)
{
    using (Html.BeginForm())
    {
        <div ng-app="ProjectFirmaApp" ng-controller="ExpectedFundingController">
            <div class="form-group">
                <label class="control-label">@FieldDefinitionEnum.FundingSource.ToType().GetFieldDefinitionLabel() to Add:</label>
                <div class="input-group">
                    <select ng-model="FundingSourceIDToAdd" 
                            class="selectpicker"
                            data-live-search="true"
                            data-container="body"
                            title="Select a @FieldDefinitionEnum.FundingSource.ToType().GetFieldDefinitionLabel() to Add"
                            data-width="70%">
                        <option value="null" disabled selected>Select a @FieldDefinitionEnum.FundingSource.ToType().GetFieldDefinitionLabel() to Add</option>
                        <option ng-repeat="fundingSource in filteredFundingSources()"
                                value="{{fundingSource.FundingSourceID}}"
                                ng-selected="FundingSourceIDToAdd == fundingSource.FundingSourceID"
                                ng-bind="fundingSource.DisplayName"
                                data-tokens="{{fundingSource.DisplayName}} {{fundingSource.OrganizationFullName}}"></option>
                    </select>
                    <span class="input-group-btn">
                        <button class="btn btn-firma" type="button" ng-click="addRow()">
                            <span class="glyphicon glyphicon-plus"></span> Add
                        </button>
                    </span>
                </div>
                <p style="font-size: 12px;">
                    @(FieldDefinitionEnum.FundingSource.ToType().GetFieldDefinitionLabel()) not listed?
                    @ModalDialogFormHelper.ModalDialogFormLink("Contact support", ViewDataTyped.RequestFundingSourceUrl, "Request Support", 800, "Submit Request", "Cancel", new List<string>(), null, null)
                </p>
            </div>
            <div style="overflow-x: auto" class="form-inline">
                <table class="table" style="margin-top: 20px; overflow: scroll" ng-show="AngularModel.ProjectFundingSourceBudgets.length > 0">
                    <tr>
                        <th></th>
                        <th>@Html.LabelWithSugarFor(FieldDefinitionEnum.FundingSource.ToType())</th>
                        <th style="text-align: right">@Html.LabelWithSugarFor(FieldDefinitionEnum.SecuredFunding.ToType())</th>
                        <th style="text-align: right">@Html.LabelWithSugarFor(FieldDefinitionEnum.TargetedFunding.ToType())</th>
                        <th style="text-align: right">Total</th>
                    </tr>
                    <tr ng-repeat="projectFundingSourceBudget in AngularModel.ProjectFundingSourceBudgets | orderBy:[getFundingSourceName]">
                        <td>
                            <span class="glyphicon glyphicon-trash blue" title="Remove row" alt="Remove row" ng-click="deleteRow(projectFundingSourceBudget)" style="cursor: pointer"></span>
                        </td>
                        <td ng-bind="getFundingSourceName(projectFundingSourceBudget)"></td>
                        <td style="text-align: right">
                            <input type="text" style="text-align: right" ng-model="projectFundingSourceBudget.SecuredAmount" class="sitkaCurrency form-control " ng-currency />
                        </td>
                        <td style="text-align: right">
                            <input type="text" style="text-align: right" ng-model="projectFundingSourceBudget.TargetedAmount" class="sitkaCurrency form-control" ng-currency />
                        </td>
                        <th style="text-align: right">
                            {{ getRowTotal(projectFundingSourceBudget) | currency:"$"}}
                        </th>
                    </tr>
                    <tr>
                        <th colspan="2">Total</th>
                        <th style="text-align: right">
                            {{ getSecuredTotal() | currency:"$"}}
                        </th>
                        <th style="text-align: right">
                            {{ getTargetedTotal() | currency:"$"}}
                        </th>
                        <th style="text-align: right">
                            {{getTotal() | currency:"$"}}
                        </th>
                    </tr>
                </table>
            </div>
            <hr />
            <div style="margin: 10px 0px; padding: 5px 10px;">
                <p>
                    <label class="control-label">Summary of Total @FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabel() Costs and Funding:</label>
                </p>
                @if (ViewDataTyped.Project.FundingTypeID == FundingType.BudgetSameEachYear.FundingTypeID)
                {
                    <table>
                        <tr>
                            <td style="width: 200px">
                                Estimated Annual Operating Cost:
                            </td>
                            <td>
                                <span>@ViewDataTyped.ProjectUpdateBatch.ProjectUpdate.EstimatedAnnualOperatingCost.ToStringCurrency()</span>
                            </td>
                        </tr>
                        <tr>
                            <td class="text-right">
                                Estimated Total Operating Cost:
                            </td>
                        </tr>
                    </table>
                }
                else
                {
                    <div class="row">
                        <div class="col-sm-3">@Html.LabelWithSugarFor(FieldDefinitionEnum.EstimatedTotalCost.ToType()):</div>
                        <div class="col-sm-3 text-right">
                            <span>
                                {{ AngularViewData.EstimatedTotalCost | currency:"$"}}
                            </span>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-sm-3">@Html.LabelWithSugarFor(FieldDefinitionEnum.SecuredFunding.ToType()):</div>
                        <div class="col-sm-3 text-right">
                            <span>
                                {{getSecuredTotal() | currency:"$"}}
                            </span>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-sm-3">@Html.LabelWithSugarFor(FieldDefinitionEnum.NoFundingSourceIdentified.ToType(), FieldDefinitionEnum.NoFundingSourceIdentified.ToType().GetFieldDefinitionLabel() + ":")</div>
                        <div class="col-sm-3 text-right">
                            <span>
                                {{ (AngularViewData.EstimatedTotalCost - getSecuredTotal()) | currency:"$"}}
                            </span>
                        </div>
                        <div class="col-sm-6 text-right" ng-show="getTargetedTotal() > 0">
                            (<span>
                                {{(getTargetedTotal()) | currency:"$"}}
                            </span> identified as @Html.LabelWithSugarFor(FieldDefinitionEnum.TargetedFunding.ToType()))
                        </div>
                    </div>
                }
            </div>



            <div ng-repeat="projectFundingSourceBudget in AngularModel.ProjectFundingSourceBudgets | orderBy:[getFundingSourceName]">
                <input type="hidden" name="@Html.NameFor(x => x.ProjectFundingSourceBudgets[0].ProjectID).ToString().Replace("0", "{{$index}}")" value="{{projectFundingSourceBudget.ProjectID}}" />
                <input type="hidden" name="@Html.NameFor(x => x.ProjectFundingSourceBudgets[0].FundingSourceID).ToString().Replace("0", "{{$index}}")" value="{{projectFundingSourceBudget.FundingSourceID}}" />
                <input type="hidden" name="@Html.NameFor(x => x.ProjectFundingSourceBudgets[0].SecuredAmount).ToString().Replace("0", "{{$index}}")" value="{{projectFundingSourceBudget.SecuredAmount}}" />
                <input type="hidden" name="@Html.NameFor(x => x.ProjectFundingSourceBudgets[0].TargetedAmount).ToString().Replace("0", "{{$index}}")" value="{{projectFundingSourceBudget.TargetedAmount}}" />
            </div>

            @if (ViewDataTyped.ShowApproveAndReturnButton)
            {
                <hr />
                <div class="row form-group">
                    <div class="col-md-3">@Html.LabelWithSugarFor(x => x.Comments)</div>
                    <div class="col-md-9">
                        @Html.TextAreaFor(x => x.Comments, new Dictionary<string, object> { { "style", "width: 100%" }, { "class", "form-control" } })
                    </div>
                </div>
            }
            <hr />
            @{ SectionComments.RenderPartialView(Html, ViewDataTyped.SectionCommentsViewData); }
            <table class="summaryLayout" style="width: 100%">
                <tr>
                    <td>
                        @ModalDialogFormHelper.ModalDialogFormLink("revert-button", "Revert Current Page", ViewDataTyped.RefreshUrl, "Refresh this section", 500, "Continue", "Continue", "Cancel", new List<string> { "btn btn-xs btn-firma" }, null, null, null, "Undo all changes on this page")
                        @if (ViewDataTyped.ProjectUpdateStatus.IsExpectedFundingUpdated)
                        {
                            @ModalDialogFormHelper.ModalDialogFormLink("diff-link-id", "Show Changes", ViewDataTyped.DiffUrl, string.Format("Changes to {0} Expenditures", FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabel()), 800, "hidden-save-button", string.Empty, "Close", new List<string> { "btn btn-xs btn-firma" }, null, null, null)
                        }
                    </td>
                    <td style="text-align: right; white-space: nowrap">
                        <button type="submit" class="btn btn-xs btn-firma" title="Save changes made on this page" value="false" name="@Html.NameFor(x => x.AutoAdvance)" ng-disabled="pmForm.$invalid">Save</button>
                        <button type="submit" class="btn btn-xs btn-firma" title="Save changes and continue to next page" value="true" name="@Html.NameFor(x => x.AutoAdvance)" ng-disabled="pmForm.$invalid">Save &amp; Continue<span class='glyphicon glyphicon-chevron-right'></span></button>
                    </td>
                </tr>
            </table>

        </div>
    }
}



<script type="text/javascript">
    //<![CDATA[
    jQuery(document).ready(function () { HookupCheckIfFormIsDirty(undefined, ".submitProject"); });
    // ]]>
</script>
@*-----------------------------------------------------------------------
    <copyright file="Index.cshtml" company="Tahoe Regional Planning Agency and Sitka Technology Group">
    Copyright (c) Tahoe Regional Planning Agency and Sitka Technology Group. All rights reserved.
    <author>Sitka Technology Group</author>
    </copyright>

    <license>
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

    Source code is available upon request via <support@sitkatech.com>.
    </license>
    -----------------------------------------------------------------------*@

@using LtInfo.Common.DhtmlWrappers
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using ProjectFirma.Web.Models
@using ProjectFirma.Web.Views
@using ProjectFirma.Web.Views.Shared
@using ProjectFirma.Web.Views.Shared.ProjectLocationControls
@using ProjectFirmaModels.Models
@inherits ProjectFirma.Web.Views.ProjectFinder.Index

@section JavascriptAndStylesContent
{
    @{ DhtmlxGridIncludes.RenderPartialView(Html); }
    @{ MapJavascriptIncludes.RenderPartialView(Html); }
    <script type="text/javascript">
        ProjectFirmaMaps.Map.prototype.initializeProjectLocations = function(projectLocationsMapInitJson)
        {
            if (Sitka.Methods.isUndefinedNullOrEmpty(projectLocationsMapInitJson.ProjectMapCustomization))
            {
                throw new Error("No map customization object defined!");
            }

            this.legendColorsToUse = @Html.Raw(JObject.FromObject(ViewDataTyped.LegendFormats).ToString(Formatting.None));

            // default to clustering
            this.areLocationsClustered = false;
            // set the project locations
            this.projectLocations = projectLocationsMapInitJson.ProjectLocationsLayerGeoJson;

            // initialize to no filters
            this.mapCustomizationObject = projectLocationsMapInitJson.ProjectMapCustomization;
            // draw the project locations
            this.addLocationLayers();

            // prevent standard popup for lat/long when clicking on general map area (not features)
            this.removeClickEventHandler();
        };

        ProjectFirmaMaps.Map.prototype.changeFilter = function(filterPropertyNameSelected, actualFilter)
        {
            this.mapCustomizationObject.FilterPropertyName = filterPropertyNameSelected;
            this.mapCustomizationObject.FilterPropertyValues = actualFilter;
            this.addLocationLayers();
        };

        ProjectFirmaMaps.Map.prototype.changePropertyToColorProjectLocationsBy = function(colorByPropertyName)
        {
            this.mapCustomizationObject.ColorByPropertyName = colorByPropertyName;
            this.addLocationLayers();
        };

        ProjectFirmaMaps.Map.prototype.changeClustering = function(areLocationsClustered)
        {
            this.areLocationsClustered = areLocationsClustered;
            this.addLocationLayers();
        };

        ProjectFirmaMaps.Map.prototype.addLocationLayers = function()
        {
            this.projectLocationsLayer = this.addProjectLocationsToMap(this.projectLocations, this.projectLocationsLayer, "Mapped @(FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabelPluralized())", true);
        }

        ProjectFirmaMaps.Map.prototype.addProjectLocationsToMap = function(points, layer, layerName, showByDefault)
        {
            var self = this;
            if (layer != null)
            {
                this.map.removeLayer(layer);
                this.layerControl.removeLayer(layer);
            }

            var markerColorTable = this.legendColorsToUse[this.mapCustomizationObject.ColorByPropertyName];
            var markerClusterGroup = L.markerClusterGroup({ maxClusterRadius: 40 });
            var newLayer = L.geoJson(points.GeoJsonFeatureCollection, {
                pointToLayer: function(feature, latlng)
                {
                    var legendColor = _.result(_.find(markerColorTable, function(legendItem) { return legendItem.LegendID == feature.properties[self.mapCustomizationObject.ColorByPropertyName]; }), 'LegendColor');
                    var marker = L.marker(latlng, { icon: L.MakiMarkers.icon({ icon: "marker", color: legendColor, size: "s" }) });
                    self.bindPopupToFeature(marker, feature);
                    return marker;
                },
                filter: function(feature)
                {
                    var b = !!Sitka.Methods.isUndefinedNullOrEmpty(self.mapCustomizationObject.FilterPropertyName) ||
                        _.intersection(
                            _.map(feature.properties[self.mapCustomizationObject.FilterPropertyName].split(","), Number),
                            _.map(self.mapCustomizationObject.FilterPropertyValues, Number))
                            .length > 0;
                    return b;
                }
            });
            if (this.areLocationsClustered)
            {
                newLayer.addTo(markerClusterGroup);
                layer = markerClusterGroup;
            }
            else
            {
                layer = newLayer;
            }

            if (showByDefault)
            {
                layer.addTo(this.map);
            }

            this.layerControl.addOverlay(layer, layerName);

            jQuery("#projectLocationsMapContainer_" + this.MapDivId)
                .find(".mapLegend")
                .html(this.getLegend());

            return layer;
        };

        ProjectFirmaMaps.Map.prototype.getLegend = function() {
            var markerColorTable = this.legendColorsToUse[this.mapCustomizationObject.ColorByPropertyName];
            var allLegendsHtml = "";
            for (var i = 0; i < markerColorTable.length; ++i)
            {
                var currentLegendIcon = L.MakiMarkers.icon({ icon: "marker", color: markerColorTable[i].LegendColor, size: "s" }),
                    currentLegendAsHtml = currentLegendIcon.options.iconUrl;
                allLegendsHtml += "<div class=\"mapLegendElement\">" + "<img class='mapLegendIcon' src= '" + currentLegendAsHtml  + "'></img>" + markerColorTable[i].LegendText + "</div>";
            }
            return allLegendsHtml;
        };





        jQuery(document).ready(function() {
            var projectLocationsMapInitJson = @Html.Raw(JObject.FromObject(ViewDataTyped.ProjectLocationsMapInitJson).ToString(Formatting.None));
            projectFirmaMap = new ProjectFirmaMaps.Map(projectLocationsMapInitJson);
            projectFirmaMap.initializeProjectLocations(projectLocationsMapInitJson);

        });

    </script>
}

@section RightOfPageTitle
{

}

<div style="padding-top: 10px;">
    <p>The @FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabelPluralized() listed below may be associated with @ViewDataTyped.Organization.GetDisplayName() by one or all of the following: @FieldDefinitionEnum.MatchmakerKeyword.ToType().GetFieldDefinitionLabel(), @FieldDefinitionEnum.AreaOfInterest.ToType().GetFieldDefinitionLabel(), @FieldDefinitionEnum.TaxonomySystemName.ToType().GetFieldDefinitionLabel(),  @FieldDefinitionEnum.Classification.ToType().GetFieldDefinitionLabel(), or @FieldDefinitionEnum.PerformanceMeasure.ToType().GetFieldDefinitionLabel().</p>
    <p>Use the filters below to search for @FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabelPluralized() by type, or click a @FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabel()'s name to see more details. Selecting a @FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabel() from the grid will display the results in the map.</p>
</div>
<div class="row">
    <div class="col-md-7">
        @Html.DhtmlxGrid(ViewDataTyped.ProjectFinderGridSpec, ViewDataTyped.ProjectFinderGridName, ViewDataTyped.ProjectFinderGridDataUrl, null, DhtmlxGridResizeType.VerticalFillHorizontalAutoFit)
    </div>
    <div class="col-md-5">
        <div id="@ViewDataTyped.ProjectLocationsMapInitJson.MapDivID" style="height: 80vh; margin: 5px 0 5px 0">
        </div>

    </div>
</div>

